/*
    Created By: Aryan Vishal Mehta
*/

#include<stdio.h>
#include<string.h>
#include<graphics.h>
#include<conio.h>
#include<dos.h>
#include<stdlib.h>
#include<math.h>

struct block{
    int blkStatus;
    int x_marked;    
    int o_marked;
};

block bk1,bk2,bk3,bk4,bk5,bk6,bk7,bk8,bk9;



void full_circle(int xc,int yc,int x,int y,int color){
    putpixel(xc+x,yc+y,color);
    putpixel(xc-x,yc+y,color);
    putpixel(xc+x,yc-y,color);
    putpixel(xc-x,yc-y,color);
    putpixel(xc+y,yc+x,color);
    putpixel(xc-y,yc+x,color);
    putpixel(xc+y,yc-x,color);
    putpixel(xc-y,yc-x,color);
}

void put_bres(int x1, int y1, int x2, int y2,int color) {
    int dx, dy, p, x, y, stepx, stepy;

    dx = abs(x2 - x1);
    dy = abs(y2 - y1);

    if(x1 < x2) {
	stepx = 1;
    } else {
	stepx = -1;
    }

    if(y1 < y2) {
	stepy = 1;
    } else {
	stepy = -1;
    }

    x = x1;
    y = y1;

    putpixel(x,y,3);

    if (dx > dy) {
	p = 2 * dy - dx;

	while (x != x2) {
	    x += stepx;
	    if (p < 0) {
		p += 2 * dy;
	    } else {
		y += stepy;
		p += 2 * (dy - dx);
	    }
	    putpixel(x,y,color);
	}
    } else {
	    p = 2 * dx - dy;

	    while (y != y2) {
	        y += stepy;
	        if (p < 0) {
		        p += 2 * dx;
	        } else {
		        x += stepx;
		        p += 2 * (dx - dy);
	    }
	            putpixel(x, y,color);
	    }
    }
}

void plot_bres_circle(int xc,int yc,int r,int color){
    int x,y,d;

    x = 0;
    y = r;
    d = 3-2*r;

    while (x<=y)
    {
        full_circle(xc,yc,x,y,color);

        if(d<0){
            d = d+4*x+6;
        }
        else{
            d = d+4*(x-y)+10;
            y = y-1;
        }
        x = x+1;
        //delay(15);
    }
    
}

void scan_fill(int xc, int yc,int xdiff,int ydiff){
    int i, j, x, y;
    int ymax = yc + ydiff; // maximum y coordinate of rectangle
    int ymin = yc - ydiff; // minimum y coordinate of rectangle
    
    // scan each horizontal line of the rectangle
    for (y = ymin; y <= ymax; y++) {
        int intersections = 0;
        int xvals[2];
        
        // find the intersection points of the current scan line with the rectangle
        for (i = 0; i < 4; i++) {
            int x1, y1, x2, y2;
            
            // get the coordinates of the current line segment of the rectangle
            switch(i){
                case 0:
                    x1 = xc-xdiff;
                    y1 = yc-ydiff;
                    x2 = xc+xdiff;
                    y2 = yc-ydiff;
                    break;
                case 1:
                    x1 = xc+xdiff;
                    y1 = yc-ydiff;
                    x2 = xc+xdiff;
                    y2 = yc+ydiff;
                    break;
                case 2:
                    x1 = xc+xdiff;
                    y1 = yc+ydiff;
                    x2 = xc-xdiff;
                    y2 = yc+ydiff;
                    break;
                case 3:
                    x1 = xc-xdiff;
                    y1 = yc+ydiff;
                    x2 = xc-xdiff;
                    y2 = yc-ydiff;
                    break;
            }
            
            // check if the current line segment intersects with the current scan line
            if (y1 <= y && y2 > y || y2 <= y && y1 > y) {
                xvals[intersections++] = (int)(x1 + (double)(y - y1) / (y2 - y1) * (x2 - x1));
            }
        }
        
        // sort the intersection points in ascending order
        for (i = 0; i < intersections - 1; i++) {
            for (j = i + 1; j < intersections; j++) {
                if (xvals[i] > xvals[j]) {
                    int temp = xvals[i];
                    xvals[i] = xvals[j];
                    xvals[j] = temp;
                }
            }
        }
        
        // fill the pixels between the intersection points with the fill color
        for (i = 0; i < intersections - 1; i++) {
	    for (x = xvals[i]; x < xvals[i+1]; x++) {
		putpixel(x, y,0);
	    }
	}
    }
}

void plot_black_rect(int xc,int yc,int xdiff,int ydiff){
    //plotting rectangle
    put_bres(xc-xdiff,yc-ydiff,xc+xdiff,yc-ydiff,0);
    put_bres(xc-xdiff,yc-ydiff,xc-xdiff,yc+ydiff,0);
    put_bres(xc-xdiff,yc+ydiff,xc+xdiff,yc+ydiff,0);
    put_bres(xc+xdiff,yc+ydiff,xc+xdiff,yc-ydiff,0);

    scan_fill(xc,yc,xdiff,ydiff);
}

void drawGrid() {
    // Heading
    settextstyle(DEFAULT_FONT,HORIZ_DIR,2);
    outtextxy(200, 50, (char*)"Tic-Tac-Toe");

    settextstyle(DEFAULT_FONT,HORIZ_DIR,1);
    // Legends
    setcolor(RED);
    outtextxy(0, 100, (char*)"Player 1: X");
    setcolor(GREEN);
    outtextxy(0, 130, (char*)"Player 2: O");

    settextstyle(DEFAULT_FONT,HORIZ_DIR,1);
    // Grid
    put_bres(270, 100, 270, 250, 15);
    put_bres(320, 100, 320, 250, 15);
    put_bres(220, 150, 370, 150, 15);
    put_bres(220, 200, 370, 200, 15);

    // Block Numbers
    setcolor(WHITE);
    outtextxy(245, 125, (char*)"1");
    outtextxy(295, 125, (char*)"2");
    outtextxy(340, 125, (char*)"3");
    outtextxy(245, 175, (char*)"4");
    outtextxy(295, 175, (char*)"5");
    outtextxy(340, 175, (char*)"6");
    outtextxy(245, 225, (char*)"7");
    outtextxy(295, 225, (char*)"8");
    outtextxy(340, 225, (char*)"9");

    //current Player label
    outtextxy(500,50,(char*)"Current Turn :");

    outtextxy(0,450,"Press 'E' to exit!");
}

void reGrid(int xc,int yc,char slcBlk){
    char str[10];
    sprintf(str,"%d",slcBlk);
    setcolor(BLACK);
    outtextxy(xc,yc,str);
}

void plot_x(int xc,int yc){
    put_bres(xc-10,yc-10,xc+10,yc+10,4);
    put_bres(xc+10,yc-10,xc-10,yc+10,4);
}

void plot_o(int xc,int yc){
    plot_bres_circle(xc,yc,10,2);
}

int plot_tics(int selBlock,int currCh){
    int xc,yc;
    switch (selBlock)
    {
    case 1:
	xc = 245,yc=125;
	reGrid(xc,yc,selBlock);
	if(bk1.blkStatus==0){
	    if (currCh==0)
	    {
		plot_x(xc,yc);
		bk1.blkStatus=1;
		bk1.x_marked=1;
		currCh++;
	    }else{
		plot_o(xc,yc);
		bk1.blkStatus=1;
		bk1.o_marked=1;
		currCh=currCh-1;
	    }
	    return currCh;
	}else{
	    setcolor(WHITE);
	    outtextxy(230,400,(char*)"Block already Plotted");
	    if(bk1.x_marked==1){
		plot_x(xc,yc);
	    }else{
		plot_o(xc,yc);
	    }
	    return currCh;
	}
	break;


    case 2:
	xc = 295,yc=125;
	reGrid(xc,yc,selBlock);
	if(bk2.blkStatus==0){
	    if (currCh==0)
	    {
		plot_x(xc,yc);
		bk2.blkStatus=1;
		bk2.x_marked=1;
		currCh++;
	    }else{
		plot_o(xc,yc);
		bk2.blkStatus=1;
		bk2.o_marked=1;
		currCh=currCh-1;
	    }
	    return currCh;
	}else{
	    setcolor(WHITE);
	    outtextxy(230,400,(char*)"Block already Plotted");
	    if(bk2.x_marked==1){
		plot_x(xc,yc);
	    }else{
		plot_o(xc,yc);
	    }
	    return currCh;
	}
	break;

    case 3:
	xc = 340,yc=125;
	reGrid(xc,yc,selBlock);
	if(bk3.blkStatus==0){
	    if (currCh==0)
	    {
		plot_x(xc,yc);
		bk3.blkStatus=1;
		bk3.x_marked=1;
		currCh++;
	    }else{
		plot_o(xc,yc);
		bk3.blkStatus=1;
		bk3.o_marked=1;
		currCh=currCh-1;
	    }
	    return currCh;
	}else{
	    setcolor(WHITE);
	    outtextxy(230,400,(char*)"Block already Plotted");
	    if(bk3.x_marked==1){
		plot_x(xc,yc);
	    }else{
		plot_o(xc,yc);
	    }
	    return currCh;
	}
	break;

    case 4:
	xc = 245,yc=175;
	reGrid(xc,yc,selBlock);
	if(bk4.blkStatus==0){
	    if (currCh==0)
	    {
		plot_x(xc,yc);
		bk4.blkStatus=1;
		bk3.x_marked=1;
		currCh++;
	    }else{
		plot_o(xc,yc);
		bk4.blkStatus=1;
		bk4.o_marked=1;
		currCh=currCh-1;
	    }
	    return currCh;
	}else{
	    setcolor(WHITE);
	    outtextxy(230,400,(char*)"Block already Plotted");
	    if(bk4.x_marked==1){
		plot_x(xc,yc);
	    }else{
		plot_o(xc,yc);
	    }
	    return currCh;
	}
	break;

    case 5:
	xc = 295,yc=175;
	reGrid(xc,yc,selBlock);
	if(bk5.blkStatus==0){
	    if (currCh==0)
	    {
		plot_x(xc,yc);
		bk5.blkStatus=1;
		bk5.x_marked=1;
		currCh++;
	    }else{
		plot_o(xc,yc);
		bk5.blkStatus=1;
		bk5.o_marked=1;
		currCh=currCh-1;
	    }
	    return currCh;
	}else{
	    setcolor(WHITE);
	    outtextxy(230,400,(char*)"Block already Plotted");
	    if(bk5.x_marked==1){
		plot_x(xc,yc);
	    }else{
		plot_o(xc,yc);
	    }
	    return currCh;
	}
	break;

    case 6:
	xc = 340,yc=175;
	reGrid(xc,yc,selBlock);
	if(bk6.blkStatus==0){
	    if (currCh==0)
	    {
		plot_x(xc,yc);
		bk6.blkStatus=1;
		bk6.x_marked=1;
		currCh++;
	    }else{
		plot_o(xc,yc);
		bk6.blkStatus=1;
		bk6.o_marked=1;
		currCh=currCh-1;
	    }
	    return currCh;
	}else{
	    setcolor(WHITE);
	    outtextxy(230,400,(char*)"Block already Plotted");
	    if(bk6.x_marked==1){
		plot_x(xc,yc);
	    }else{
		plot_o(xc,yc);
	    }
	    return currCh;
	}
	break;

    case 7:
	xc = 245,yc=225;
	reGrid(xc,yc,selBlock);
	if(bk7.blkStatus==0){
	    if (currCh==0)
	    {
		plot_x(xc,yc);
		bk7.blkStatus=1;
		bk7.x_marked=1;
		currCh++;
	    }else{
		plot_o(xc,yc);
		bk7.blkStatus=1;
		bk7.o_marked=1;
		currCh=currCh-1;
	    }
	    return currCh;
	}else{
	    setcolor(WHITE);
	    outtextxy(230,400,(char*)"Block already Plotted");
	    if(bk7.x_marked==1){
		plot_x(xc,yc);
	    }else{
		plot_o(xc,yc);
	    }
	    return currCh;
	}
	break;

    case 8:
	xc = 295,yc=225;
	reGrid(xc,yc,selBlock);
	if(bk8.blkStatus==0){
	    if (currCh==0)
	    {
		plot_x(xc,yc);
		bk8.blkStatus=1;
		bk8.x_marked=1;
		currCh++;
	    }else{
		plot_o(xc,yc);
		bk8.blkStatus=1;
		bk8.o_marked=1;
		currCh=currCh-1;
	    }
	    return currCh;
	}else{
	    setcolor(WHITE);
	    outtextxy(230,400,(char*)"Block already Plotted");
	    if(bk8.x_marked==1){
		plot_x(xc,yc);
	    }else{
		plot_o(xc,yc);
	    }
	    return currCh;
	}
	break;

    case 9:
	xc = 340,yc=225;
	reGrid(xc,yc,selBlock);
	if(bk9.blkStatus==0){
	    if (currCh==0)
	    {
		plot_x(xc,yc);
		bk9.blkStatus=1;
		bk9.x_marked=1;
		currCh++;
	    }else{
		plot_o(xc,yc);
		bk9.blkStatus=1;
		bk9.o_marked=1;
		currCh=currCh-1;
	    }
	    return currCh;
	}else{
	    setcolor(WHITE);
	    outtextxy(230,400,(char*)"Block already Plotted");
	    plot_black_rect(xc,yc,15,20);
	    if(bk9.x_marked==1){
		plot_x(xc,yc);
	    }else{
		plot_o(xc,yc);
	    }
	    return currCh;
	}
	break;
    }
}

int userInput(int currCh){
    int selblk;
    char selblkstr[2] = "";
    setcolor(WHITE);
    outtextxy(160,300,(char*)"Enter the Block Number to Plot(1-9):");

    put_bres(200,320,400,320,15);
    put_bres(200,360,400,360,15);
    put_bres(200,320,200,360,15);
    put_bres(400,320,400,360,15);

    outtextxy(300,330, selblkstr);
    while(1){
	settextstyle(DEFAULT_FONT,HORIZ_DIR,1);
	char c = getch();
	if(c == 13 && selblk >= 1 && selblk <= 9){
	    plot_black_rect(300,340,80,15);
	    plot_black_rect(320,400,110,20);
	    break;
	} //break loop on Enter key press and valid input
	else if(c >= '1' && c <= '9' && strlen(selblkstr) < 1){ //append digits to string
	    selblkstr[strlen(selblkstr)] = c;
	    selblk = atoi(selblkstr); //update integer value
	    setcolor(WHITE);
	    settextstyle(DEFAULT_FONT,HORIZ_DIR,2);
	    outtextxy(300, 330, selblkstr); //update text box
	}
	else if(c == 8){ //handle backspace key press
	    selblkstr[strlen(selblkstr)-1] = '\0'; //remove last character from string
	    selblk = atoi(selblkstr); //update integer value
	    plot_black_rect(300,340,80,15);
	    setcolor(WHITE);
	    outtextxy(300, 330, selblkstr); //update text box
	}
	else if(c=='e'||c=='E'){
		closegraph();
		exit(0);
	}
    }

    currCh = plot_tics(selblk,currCh);
    return currCh;
}

void plot_currentPlayer(int currCh){
    plot_black_rect(520,90,80,20);
    if(currCh==0){
	setcolor(RED);
	outtextxy(500,80,(char*)"Player 1(X)");
    }else{
	setcolor(GREEN);
	outtextxy(500,80,(char*)"Player 2(O)");
    }
}

int check_result(){
    if((bk1.x_marked==1&&bk2.x_marked==1&&bk3.x_marked==1)
    ||(bk1.x_marked==1&&bk5.x_marked==1&&bk9.x_marked==1)
    ||(bk4.x_marked==1&&bk5.x_marked==1&&bk6.x_marked==1)
    ||(bk7.x_marked==1&&bk8.x_marked==1&&bk9.x_marked==1)
    ||(bk7.x_marked==1&&bk5.x_marked==1&&bk3.x_marked==1)
    ||(bk3.x_marked==1&&bk6.x_marked==1&&bk9.x_marked==1)
    ||(bk2.x_marked==1&&bk5.x_marked==1&&bk8.x_marked==1)
    ||(bk7.x_marked==1&&bk1.x_marked==1&&bk4.x_marked==1)
    ||(bk1.x_marked==1&&bk4.x_marked==1&&bk7.x_marked==1)){
	return 1;
    }
    else if((bk1.o_marked==1&&bk4.o_marked==1&&bk7.o_marked==1)
    ||(bk1.o_marked==1&&bk2.o_marked==1&&bk3.o_marked==1)
    ||(bk1.o_marked==1&&bk5.o_marked==1&&bk9.o_marked==1)
    ||(bk4.o_marked==1&&bk5.o_marked==1&&bk6.o_marked==1)
    ||(bk7.o_marked==1&&bk8.o_marked==1&&bk9.o_marked==1)
    ||(bk7.o_marked==1&&bk5.o_marked==1&&bk3.o_marked==1)
    ||(bk3.o_marked==1&&bk6.o_marked==1&&bk9.o_marked==1)
    ||(bk2.o_marked==1&&bk5.o_marked==1&&bk8.o_marked==1)){
	return 2;
    }
    else if(
    (bk1.blkStatus==1 && bk2.blkStatus==1 && bk3.blkStatus==1 && bk4.blkStatus==1 && bk5.blkStatus==1 &&
    bk6.blkStatus==1 && bk7.blkStatus==1 && bk8.blkStatus==1 && bk9.blkStatus==1)&&
    (
    !(bk1.x_marked==1&&bk2.x_marked==1&&bk3.x_marked==1 ||
    bk4.x_marked==1&&bk5.x_marked==1&&bk6.x_marked==1 ||
    bk7.x_marked==1&&bk8.x_marked==1&&bk9.x_marked==1 ||
    bk1.x_marked==1&&bk4.x_marked==1&&bk7.x_marked==1 ||
    bk2.x_marked==1&&bk5.x_marked==1&&bk8.x_marked==1 ||
    bk3.x_marked==1&&bk6.x_marked==1&&bk9.x_marked==1 ||
    bk1.x_marked==1&&bk5.x_marked==1&&bk9.x_marked==1 ||
    bk3.x_marked==1&&bk5.x_marked==1&&bk7.x_marked==1 ||
    bk1.o_marked==1&&bk2.o_marked==1&&bk3.o_marked==1 ||
    bk4.o_marked==1&&bk5.o_marked==1&&bk6.o_marked==1 ||
    bk7.o_marked==1&&bk8.o_marked==1&&bk9.o_marked==1 ||
    bk1.o_marked==1&&bk4.o_marked==1&&bk7.o_marked==1 ||
    bk2.o_marked==1&&bk5.o_marked==1&&bk8.o_marked==1 ||
    bk3.o_marked==1&&bk6.o_marked==1&&bk9.o_marked==1 ||
    bk1.o_marked==1&&bk5.o_marked==1&&bk9.o_marked==1 ||
    bk3.o_marked==1&&bk5.o_marked==1&&bk7.o_marked==1)||
    (!(bk1.o_marked==1&&bk4.o_marked==1&&bk7.o_marked==1)||
    (bk1.o_marked==1&&bk2.o_marked==1&&bk3.o_marked==1)||
    (bk1.o_marked==1&&bk5.o_marked==1&&bk9.o_marked==1)||
    (bk4.o_marked==1&&bk5.o_marked==1&&bk6.o_marked==1)||
    (bk7.o_marked==1&&bk8.o_marked==1&&bk9.x_marked==1)||
    (bk7.o_marked==1&&bk5.o_marked==1&&bk3.o_marked==1)||
    (bk3.o_marked==1&&bk6.o_marked==1&&bk9.o_marked==1)||
    (bk2.o_marked==1&&bk5.o_marked==1&&bk8.o_marked==1)))
    ){
	return 3;
    }
}

void openSc(){
	int gd=DETECT,gm;
	int visible=1;
	initgraph(&gd,&gm,"c:\\turboc3\\bgi");
	setcolor(GREEN);
	outtextxy(0,50,"******************************************************************************************************");
	settextstyle(DEFAULT_FONT,HORIZ_DIR,4);
	outtextxy(150,200,"Tic-Tac-Toe");
	settextstyle(DEFAULT_FONT,HORIZ_DIR,1);
	outtextxy(0,350,"******************************************************************************************************");
	setcolor(WHITE);
	while(!kbhit()){
		if(visible){
			setcolor(WHITE);
			outtextxy(220,400,"Press Any key to Play!!");
			visible=0;
		}else{
			setcolor(BLACK);
			outtextxy(220,400,"Press Any key to Play!!");
			visible=1;
		}
		delay(500);
	}
	getch();
	closegraph();
}

int main(){
    /*
    Tic-Tac_Toe
		    Player 1:X
		    Player 2:O
	 1 | 2 | 3
	___|___|___
	 4 | 5 | 6
	___|___|___
	 7 | 8 | 9
	   |   |

    Current Chance:
    */


    int gd = DETECT,gm,result=0;
    int currCh = 0,selBlock;

    openSc();
    initgraph(&gd,&gm,"c:\\turboc3\\bgi");
    drawGrid();


    do{
	plot_currentPlayer(currCh);
	result = check_result();
	if(result==1){
	    setcolor(RED);
	    outtextxy(160,400,(char*)"Player 1(X) Wins!! Press enter to Exit");
	    while (getch() != '\r') {
	    } // wait for Enter key
	    closegraph();
	    exit(0);
	}else if(result==2){
	    setcolor(GREEN);
	    outtextxy(160,400,(char*)"Player 2(O) Wins!! Press enter to Exit");
	    while (getch() != '\r') {
	    } // wait for Enter key
	    closegraph();
	    exit(0);
	}else if(result==3){
	    setcolor(WHITE);
	    outtextxy(200,400,(char*)"The game is Draw!!Press enter to Exit");
	    while (getch() != '\r') {
	    } // wait for Enter key
	    closegraph();
	    exit(0);
	}
	currCh=userInput(currCh);
    }while(result!=1||result!=2||result!=3);

    getch();
    closegraph();
    return 0;
}